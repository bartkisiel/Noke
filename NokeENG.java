/* Author: Bartłomiej Kisiel
9.03.2020
Simple programme Noke is nothing more than my try of reconstructing system of popular game of chance Keno.
Gameplay relies on betting 1-10 numbers, where one bet costs 2 pounds and
comparing them to winning, randomly generated by the machine 20 numbers.
In current version of my programme there are no stage prices - you win the whole thing or nothing.
I plan to add "consolation prizes" soon, tho. 
User can deposit any amount of money to their account, which is also a place where all the prizes go.
Random generated number does not repeat during one draw.
User cannot pick recurring numbers.
For your comfort while checking numbers I decided to add sort functions for both arrays.

*/
package nokeeng;

import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;


public class NokeENG {

    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int playerMoney = 0;
        int howManyNum;
        int [] winningNums = new int [20];
        boolean game = false;
        int depositMenu = 0;
        int earnings = 0;
       
        
        
        do{        
        System.out.println("*==================================*");
        System.out.println("    Welcome to Noke!");
        System.out.println("");
        System.out.println("        Your current money: " + playerMoney + " £.");
        System.out.println("*==================================*");
        System.out.println("Would you like to deposit some money? 1 - Yes, 2 - No");
        depositMenu = in.nextInt();
            if(depositMenu == 1){
                playerMoney = playerMoney + deposit();
                System.out.println("Your current money: " + playerMoney + " £.");
            }
            
            
            else if(depositMenu == 2 && playerMoney < 2){
                System.out.println("Thanks for playing.");
                game = false;
                break;
            }
            
            if(playerMoney < 2){
                System.out.println("You don't have enough money to play.");
                game = false;
                continue;
            }
            
           
        
        System.out.println("Type in how many numbers you'd like to bet!");
        howManyNum = in.nextInt();
        if(howManyNum < 0 || howManyNum > 10){
            System.out.println("Read rules again.");
            break;
        }
        int [] playerNum = new int [howManyNum];
        System.out.println("You bet " + howManyNum + " numbers.");
        playerMoney = playerMoney - 2;
        System.out.println("Great! Now choose them from 1-70.");
        for(int i = 0; i < howManyNum; i++){
            int userInput = in.nextInt();
            if(userInput > 70 || userInput < 1){
                System.out.println("Read the rules again.");
                System.out.println("You've lost your chance in this draw!");
                break;
            }
            
            if(duplicatesDetector(userInput, playerNum)){
                playerNum[i] = userInput;
            }
            
            
        }
        showPlayerNums(playerNum, howManyNum);
       
            generateWinningNums(winningNums);
        
        
            System.out.println("Winning numbers are:");
            System.out.print(Arrays.toString(winningNums));
            System.out.print(" ");
            System.out.println();
            System.out.println();
            Arrays.sort(winningNums);
            Arrays.sort(playerNum);
            System.out.println("Find your numbers: " + Arrays.toString(winningNums));
            System.out.println();
            System.out.println(Arrays.toString(playerNum));
            System.out.println();
            
            
            Integer [] winningInt = new Integer[winningNums.length];
            int i = 0;
                    for(int value : winningNums){
                        winningInt[i++] = value;
                    }
            Integer [] playerInt = new Integer[playerNum.length];
            int j = 0;
                    for(int value : playerNum){
                        playerInt[j++] = value;
                    }
               
            
            
            boolean checkwin = checkwin(winningInt, playerInt);
           if(checkwin == true){
                System.out.println("Congratulations!!!");
            switch(howManyNum){
                case 1:
                    playerMoney = playerMoney + 3;
                            continue;
                case 2: 
                    playerMoney = playerMoney + 14;
                    continue;
                case 3:
                    playerMoney = playerMoney + 18;
                    continue;
                case 4:
                    playerMoney = playerMoney + 60;
                    continue;
                case 5: 
                    playerMoney = playerMoney + 250;
                    continue;
                case 6: 
                    playerMoney = playerMoney + 500;
                    continue;
                case 7: 
                    playerMoney = playerMoney + 1500;
                    continue;
                case 8:
                    playerMoney = playerMoney + 10000;
                    continue;
                case 9: 
                    playerMoney = playerMoney + 50000;
                    continue;
                case 10:
                    playerMoney = playerMoney + 200000;
                    continue;
                
                  
                            
                
            }
            
        }
        
       
       if(playerMoney < 2){
           game = false;
       } 
            
        
    }while(game = true);
        
    }

    private static void showPlayerNums(int[] playerNum,int howManyNum) {
        System.out.print("Your numbers are: ");
        System.out.println(Arrays.toString(playerNum));
        System.out.println();
    }

    private static int deposit() {
        Scanner in = new Scanner(System.in);
        System.out.println("How much would you like to deposit?");
        int deposit = in.nextInt();
        return deposit;
        
        
    }

    private static int[] generateWinningNums(int [] winningNums) {
        Random rand = new Random();
        for(int i = 0; i < winningNums.length; i++){
            int randomNumber = rand.nextInt((70) + 1);
            if(duplicatesDetector(randomNumber, winningNums) && randomNumber != 0){
                winningNums[i] = randomNumber;
            } else {
                i--;
            }
            
           
        }
      return winningNums;
    }
        
    private static boolean checkwin(Integer [] winningInt, Integer [] playerInt) {
       List winningList = Arrays.asList(winningInt);
       List playerList = Arrays.asList(playerInt);
        return winningList.containsAll(playerList);
       
    }

    private static boolean duplicatesDetector(int randomNumber, int[] winningNums) {
        for(int i = 0; i < winningNums.length; i++){
            if(randomNumber == winningNums[i]){
                return false;
            }
        }
        return true;
        
    }
}
    
    

